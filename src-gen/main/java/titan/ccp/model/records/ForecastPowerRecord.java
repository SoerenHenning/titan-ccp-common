/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package titan.ccp.model.records;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ForecastPowerRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6098778880823004607L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ForecastPowerRecord\",\"namespace\":\"titan.ccp.model.records\",\"fields\":[{\"name\":\"identifier\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"*\"},{\"name\":\"forecastTimestamp\",\"type\":\"long\",\"doc\":\"predicted timestamp\"},{\"name\":\"triggerTimestamp\",\"type\":\"long\",\"doc\":\"Timestamp of the record on which this prediction is based.\"},{\"name\":\"forecastInW\",\"type\":\"double\",\"doc\":\"*\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ForecastPowerRecord> ENCODER =
      new BinaryMessageEncoder<ForecastPowerRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ForecastPowerRecord> DECODER =
      new BinaryMessageDecoder<ForecastPowerRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ForecastPowerRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ForecastPowerRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ForecastPowerRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ForecastPowerRecord>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ForecastPowerRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ForecastPowerRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ForecastPowerRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ForecastPowerRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** * */
   private java.lang.String identifier;
  /** predicted timestamp */
   private long forecastTimestamp;
  /** Timestamp of the record on which this prediction is based. */
   private long triggerTimestamp;
  /** * */
   private double forecastInW;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ForecastPowerRecord() {}

  /**
   * All-args constructor.
   * @param identifier *
   * @param forecastTimestamp predicted timestamp
   * @param triggerTimestamp Timestamp of the record on which this prediction is based.
   * @param forecastInW *
   */
  public ForecastPowerRecord(java.lang.String identifier, java.lang.Long forecastTimestamp, java.lang.Long triggerTimestamp, java.lang.Double forecastInW) {
    this.identifier = identifier;
    this.forecastTimestamp = forecastTimestamp;
    this.triggerTimestamp = triggerTimestamp;
    this.forecastInW = forecastInW;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return identifier;
    case 1: return forecastTimestamp;
    case 2: return triggerTimestamp;
    case 3: return forecastInW;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: identifier = (java.lang.String)value$; break;
    case 1: forecastTimestamp = (java.lang.Long)value$; break;
    case 2: triggerTimestamp = (java.lang.Long)value$; break;
    case 3: forecastInW = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'identifier' field.
   * @return *
   */
  public java.lang.String getIdentifier() {
    return identifier;
  }


  /**
   * Sets the value of the 'identifier' field.
   * *
   * @param value the value to set.
   */
  public void setIdentifier(java.lang.String value) {
    this.identifier = value;
  }

  /**
   * Gets the value of the 'forecastTimestamp' field.
   * @return predicted timestamp
   */
  public long getForecastTimestamp() {
    return forecastTimestamp;
  }


  /**
   * Sets the value of the 'forecastTimestamp' field.
   * predicted timestamp
   * @param value the value to set.
   */
  public void setForecastTimestamp(long value) {
    this.forecastTimestamp = value;
  }

  /**
   * Gets the value of the 'triggerTimestamp' field.
   * @return Timestamp of the record on which this prediction is based.
   */
  public long getTriggerTimestamp() {
    return triggerTimestamp;
  }


  /**
   * Sets the value of the 'triggerTimestamp' field.
   * Timestamp of the record on which this prediction is based.
   * @param value the value to set.
   */
  public void setTriggerTimestamp(long value) {
    this.triggerTimestamp = value;
  }

  /**
   * Gets the value of the 'forecastInW' field.
   * @return *
   */
  public double getForecastInW() {
    return forecastInW;
  }


  /**
   * Sets the value of the 'forecastInW' field.
   * *
   * @param value the value to set.
   */
  public void setForecastInW(double value) {
    this.forecastInW = value;
  }

  /**
   * Creates a new ForecastPowerRecord RecordBuilder.
   * @return A new ForecastPowerRecord RecordBuilder
   */
  public static titan.ccp.model.records.ForecastPowerRecord.Builder newBuilder() {
    return new titan.ccp.model.records.ForecastPowerRecord.Builder();
  }

  /**
   * Creates a new ForecastPowerRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ForecastPowerRecord RecordBuilder
   */
  public static titan.ccp.model.records.ForecastPowerRecord.Builder newBuilder(titan.ccp.model.records.ForecastPowerRecord.Builder other) {
    if (other == null) {
      return new titan.ccp.model.records.ForecastPowerRecord.Builder();
    } else {
      return new titan.ccp.model.records.ForecastPowerRecord.Builder(other);
    }
  }

  /**
   * Creates a new ForecastPowerRecord RecordBuilder by copying an existing ForecastPowerRecord instance.
   * @param other The existing instance to copy.
   * @return A new ForecastPowerRecord RecordBuilder
   */
  public static titan.ccp.model.records.ForecastPowerRecord.Builder newBuilder(titan.ccp.model.records.ForecastPowerRecord other) {
    if (other == null) {
      return new titan.ccp.model.records.ForecastPowerRecord.Builder();
    } else {
      return new titan.ccp.model.records.ForecastPowerRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for ForecastPowerRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ForecastPowerRecord>
    implements org.apache.avro.data.RecordBuilder<ForecastPowerRecord> {

    /** * */
    private java.lang.String identifier;
    /** predicted timestamp */
    private long forecastTimestamp;
    /** Timestamp of the record on which this prediction is based. */
    private long triggerTimestamp;
    /** * */
    private double forecastInW;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(titan.ccp.model.records.ForecastPowerRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.identifier)) {
        this.identifier = data().deepCopy(fields()[0].schema(), other.identifier);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.forecastTimestamp)) {
        this.forecastTimestamp = data().deepCopy(fields()[1].schema(), other.forecastTimestamp);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.triggerTimestamp)) {
        this.triggerTimestamp = data().deepCopy(fields()[2].schema(), other.triggerTimestamp);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.forecastInW)) {
        this.forecastInW = data().deepCopy(fields()[3].schema(), other.forecastInW);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing ForecastPowerRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(titan.ccp.model.records.ForecastPowerRecord other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.identifier)) {
        this.identifier = data().deepCopy(fields()[0].schema(), other.identifier);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.forecastTimestamp)) {
        this.forecastTimestamp = data().deepCopy(fields()[1].schema(), other.forecastTimestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.triggerTimestamp)) {
        this.triggerTimestamp = data().deepCopy(fields()[2].schema(), other.triggerTimestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.forecastInW)) {
        this.forecastInW = data().deepCopy(fields()[3].schema(), other.forecastInW);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'identifier' field.
      * *
      * @return The value.
      */
    public java.lang.String getIdentifier() {
      return identifier;
    }


    /**
      * Sets the value of the 'identifier' field.
      * *
      * @param value The value of 'identifier'.
      * @return This builder.
      */
    public titan.ccp.model.records.ForecastPowerRecord.Builder setIdentifier(java.lang.String value) {
      validate(fields()[0], value);
      this.identifier = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'identifier' field has been set.
      * *
      * @return True if the 'identifier' field has been set, false otherwise.
      */
    public boolean hasIdentifier() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'identifier' field.
      * *
      * @return This builder.
      */
    public titan.ccp.model.records.ForecastPowerRecord.Builder clearIdentifier() {
      identifier = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'forecastTimestamp' field.
      * predicted timestamp
      * @return The value.
      */
    public long getForecastTimestamp() {
      return forecastTimestamp;
    }


    /**
      * Sets the value of the 'forecastTimestamp' field.
      * predicted timestamp
      * @param value The value of 'forecastTimestamp'.
      * @return This builder.
      */
    public titan.ccp.model.records.ForecastPowerRecord.Builder setForecastTimestamp(long value) {
      validate(fields()[1], value);
      this.forecastTimestamp = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'forecastTimestamp' field has been set.
      * predicted timestamp
      * @return True if the 'forecastTimestamp' field has been set, false otherwise.
      */
    public boolean hasForecastTimestamp() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'forecastTimestamp' field.
      * predicted timestamp
      * @return This builder.
      */
    public titan.ccp.model.records.ForecastPowerRecord.Builder clearForecastTimestamp() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'triggerTimestamp' field.
      * Timestamp of the record on which this prediction is based.
      * @return The value.
      */
    public long getTriggerTimestamp() {
      return triggerTimestamp;
    }


    /**
      * Sets the value of the 'triggerTimestamp' field.
      * Timestamp of the record on which this prediction is based.
      * @param value The value of 'triggerTimestamp'.
      * @return This builder.
      */
    public titan.ccp.model.records.ForecastPowerRecord.Builder setTriggerTimestamp(long value) {
      validate(fields()[2], value);
      this.triggerTimestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'triggerTimestamp' field has been set.
      * Timestamp of the record on which this prediction is based.
      * @return True if the 'triggerTimestamp' field has been set, false otherwise.
      */
    public boolean hasTriggerTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'triggerTimestamp' field.
      * Timestamp of the record on which this prediction is based.
      * @return This builder.
      */
    public titan.ccp.model.records.ForecastPowerRecord.Builder clearTriggerTimestamp() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'forecastInW' field.
      * *
      * @return The value.
      */
    public double getForecastInW() {
      return forecastInW;
    }


    /**
      * Sets the value of the 'forecastInW' field.
      * *
      * @param value The value of 'forecastInW'.
      * @return This builder.
      */
    public titan.ccp.model.records.ForecastPowerRecord.Builder setForecastInW(double value) {
      validate(fields()[3], value);
      this.forecastInW = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'forecastInW' field has been set.
      * *
      * @return True if the 'forecastInW' field has been set, false otherwise.
      */
    public boolean hasForecastInW() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'forecastInW' field.
      * *
      * @return This builder.
      */
    public titan.ccp.model.records.ForecastPowerRecord.Builder clearForecastInW() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ForecastPowerRecord build() {
      try {
        ForecastPowerRecord record = new ForecastPowerRecord();
        record.identifier = fieldSetFlags()[0] ? this.identifier : (java.lang.String) defaultValue(fields()[0]);
        record.forecastTimestamp = fieldSetFlags()[1] ? this.forecastTimestamp : (java.lang.Long) defaultValue(fields()[1]);
        record.triggerTimestamp = fieldSetFlags()[2] ? this.triggerTimestamp : (java.lang.Long) defaultValue(fields()[2]);
        record.forecastInW = fieldSetFlags()[3] ? this.forecastInW : (java.lang.Double) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ForecastPowerRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<ForecastPowerRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ForecastPowerRecord>
    READER$ = (org.apache.avro.io.DatumReader<ForecastPowerRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.identifier);

    out.writeLong(this.forecastTimestamp);

    out.writeLong(this.triggerTimestamp);

    out.writeDouble(this.forecastInW);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.identifier = in.readString();

      this.forecastTimestamp = in.readLong();

      this.triggerTimestamp = in.readLong();

      this.forecastInW = in.readDouble();

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.identifier = in.readString();
          break;

        case 1:
          this.forecastTimestamp = in.readLong();
          break;

        case 2:
          this.triggerTimestamp = in.readLong();
          break;

        case 3:
          this.forecastInW = in.readDouble();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










